<svg xmlns="http://www.w3.org/2000/svg" id="svg" width="1200" height="2200" onload="init(evt)" version="1.1" viewBox="0 0 1200 2200"><defs><linearGradient id="background" x1="0" x2="0" y1="0" y2="1"><stop offset="5%" stop-color="#eee"/><stop offset="95%" stop-color="#eeeeb0"/></linearGradient></defs><style type="text/css">text { font-family:Verdana; fill:rgb(0,0,0); } #search { opacity:0.1; cursor:pointer; } #search:hover, #search.show { opacity:1; } #subtitle { text-anchor:middle; font-color:rgb(160,160,160); } #title { text-anchor:middle; font-size:17px} #unzoom { cursor:pointer; } #frames &gt; *:hover { stroke:black; stroke-width:0.5; cursor:pointer; } .hide { display:none; } .parent { opacity:0.5; } .func_g:hover { stroke:black; stroke-width:0.5; cursor:pointer; }</style><text id="alt" x="10" y="50" fill="#000" font-size="50">FGTransition.svg is drawn dynamically. Please wait</text><script href="js/FGrav.js"/><script href="js/FGravResponse.js"/><script href="js/FGravDraw.js"/><script href="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"/><script href="js/color/FG_Color.js"/><script href="js/FGDraw.js"/><script href="js/FGDrawTransition.js"/><script href="js/FGStackFrames.js"/><script href="js/FG.js"/><script type="text/ecmascript"><![CDATA[
	"use strict";

	var fg = new FG().setup();
	var draw = new FGDrawTransition(fg);
	var url = fg.getRequiredParameter("url");

	// TODO - button, set dimensions to be max of both...


	function init(evt) {
	    fg.load(function() {
            var stackFrames = new FGStackFrames();
            stackFrames.loadCollapsed(fg, url,
                function() {
                    draw.drawCanvas();
                    draw.drawInfoElements();
                    draw.drawFG(stackFrames);
                }, function(response) {
                    draw.drawError("Failed to load collapsed file " + url + ": " + response.errorMessage());
                }
            );
        }, function(response) {
            draw.drawError("Failed to load: " + response.errorMessage());
        });
	}

	function transition() {
        fg.freezeDimensions = true;
   	    var transitionToUrl = fg.getRequiredParameter("transitionTo");
        var transitionTo = new FGStackFrames();
        transitionTo.loadCollapsed(fg, transitionToUrl,
            function() {
                draw.drawTransition(stackFrames, transitionTo);
            }, function(response) {
                draw.drawError("Failed to load collapsed file " + transitionToUrl + ": " + response.errorMessage());
            }
        );
	}

	function transitionover(e) {
        fg.transitionbtn.style["opacity"] = "1.0";
    }

    function transitionout = function(e) {
        fg.transitionbtn.style["opacity"] = "0.1";
    }
};
]]></script></svg>